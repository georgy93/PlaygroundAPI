version: '3.8'

#container_name is just for docker compose UI friendly name. Referrencing containers happens with their root name

# How to use HTTPS: https://tomssl.com/how-to-run-asp-net-core-3-1-over-https-in-docker-using-linux-containers/
services:
  playground.api:
    container_name: playgroundApi
    image: ${DOCKER_REGISTRY-}playgroundapi
    build:
      context: .
      dockerfile: Web\Playground.API\Dockerfile
    ports:
      - "5000:80"
      - "5001:443"
    restart: on-failure
    environment:
      - ConnectionStrings__DefaultConnection=Server=sqlserver;Database=PlaygroundDB;User Id=sa; Password=1234!qwerty;MultipleActiveResultSets=true
      - ConnectionStrings__MongoConnection=mongodb://root:rootpass@mongoDb:27017    
    depends_on:
      kafka:
        condition: service_healthy
    links:
      - sqlServer
      - mongoDb
      - rabbitMq
      - kafka
    networks: 
      - myapi-network

  sqlServer:
    container_name: sqlServer
    image: mcr.microsoft.com/mssql/server:2019-latest
    ports: 
      - "1433:1433"
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=1234!qwerty
    volumes: 
      - sqldata:/var/opt/mssql 
    networks: 
      - myapi-network

  mongoDb:
    container_name: mongoDb
    image: mongo:latest
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: rootpass
      MONGO_INITDB_DATABASE: PlaygroundDB
    ports:
      - 27017:27017
    volumes:
      - mongodb_data_container:/data/db
    networks: 
      - myapi-network
      
  rabbitMq:
    container_name: rabbitMq
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    hostname: "rabbitmq"
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    volumes:
      - rabbitmq:/var/lib/rabbitmq/mnesia
    networks: 
      - myapi-network

  zookeeper:
    container_name: zookeeper
    image: wurstmeister/zookeeper
    hostname: zookeeper
    ports:
      - "2181:2181"
    networks: 
      - myapi-network

  kafka:
    container_name: kafka
    image: wurstmeister/kafka
    hostname: kafka
    ports:
      - "9092:9092"
      - "9094:9094"
    depends_on:
      - zookeeper
    links: 
      - zookeeper
    environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ADVERTISED_PORT: "9092"
      KAFKA_CREATE_TOPICS: "ping-pong:1:1"
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      #HOSTNAME_COMMAND: "route -n | awk '/UG[ \t]/{print $$2}'"
      #HOSTNAME_COMMAND: curl http://169.254.169.254/latest/meta-data/public-hostname
      HOSTNAME_COMMAND: "echo 127.0.0.1"
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9092,OUTSIDE://_{HOSTNAME_COMMAND}:9094
      KAFKA_LISTENERS: INSIDE://:9092,OUTSIDE://:9094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: OUTSIDE
    healthcheck:        
        test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server 127.0.0.1:9092 --topic ping-pong --describe"]
        interval: 15s
        timeout: 10s
        retries: 5
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks: 
      - myapi-network

networks:
  myapi-network:

volumes:
  sqldata:
  rabbitmq:
  mongodb_data_container: